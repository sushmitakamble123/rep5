import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

class Movie {
    String name, theater;
    int availableSeats;
    LocalDateTime showTime;
    double price;

    public Movie(String name, String theater, int availableSeats, double price, LocalDateTime showTime) {
        this.name = name;
        this.theater = theater;
        this.availableSeats = availableSeats;
        this.price = price;
        this.showTime = showTime;
    }

    public boolean bookTicket(int seats) {
        if (seats <= availableSeats) {
            availableSeats -= seats;
            return true;
        }
        return false;
    }
}

class User {
    String name, role;

    public User(String name, String role) {
        this.name = name;
        this.role = role;
    }
}

public class MovieBookingSystem {
    static ArrayList<Movie> movies = new ArrayList<>();
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        movies.add(new Movie("Cube", "The Grandview Theater", 50, 30.0, LocalDateTime.of(2025, 5, 20, 19, 30)));
        movies.add(new Movie("The Sixth Sense", "MindSpark Theater", 60, 55.0, LocalDateTime.of(2025, 6, 22, 1, 30)));
        movies.add(new Movie("Triangle", "Enigma Theater", 40, 30.5, LocalDateTime.of(2025, 1, 15, 5, 18)));
        movies.add(new Movie("First Blood", "NorthFun Theater", 70, 65.0, LocalDateTime.of(2025, 3, 1, 3, 15)));

        System.out.println("Enter your name:");
        String userName = sc.nextLine();
        System.out.print("Enter your role (Admin / Customer):");
        String userRole = sc.nextLine();

        User user = new User(userName, userRole);
        System.out.println("\nWelcome, " + user.name + "! Role: " + user.role);

        if (user.role.equalsIgnoreCase("Admin")) {
            adminMenu();
        } else if (user.role.equalsIgnoreCase("Customer")) {
            customerMenu();
        } else {
            System.out.println("Invalid role. Please restart the system.");
        }

        sc.close();
    }

    public static void adminMenu() {
        while (true) {
            System.out.println("\nAdmin Menu:");
            System.out.println("1. Add Movie");
            System.out.println("2. Delete Movie");
            System.out.println("3. Update Movie");
            System.out.println("4. View Movies");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            sc.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addMovie();
                    break;
                case 2:
                    deleteMovie();
                    break;
                case 3:
                    updateMovie();
                    break;
                case 4:
                    viewMovies();
                    break;
                case 5:
                    System.out.println("Exiting Admin Menu.");
                    return;
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }

    public static void addMovie() {
        System.out.println("Enter Movie name:");
        String name = sc.nextLine();
        System.out.println("Enter available seats:");
        int seats = sc.nextInt();
        System.out.println("Enter ticket price:");
        double price = sc.nextDouble();
        sc.nextLine(); // Consume newline
        System.out.println("Enter Theater name:");
        String theater = sc.nextLine();
        System.out.print("Enter show date and time (yyyy-MM-dd HH:mm): ");
        String dateTime = sc.nextLine();
        LocalDateTime showTime = LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));

        movies.add(new Movie(name, theater, seats, price, showTime));
        System.out.println("Movie added successfully!");
    }

    public static void deleteMovie() {
        System.out.println("Enter movie number to delete:");
        int index = sc.nextInt() - 1;
        sc.nextLine(); // Consume newline
        if (index >= 0 && index < movies.size()) {
            movies.remove(index);
            System.out.println("Movie deleted successfully!");
        } else {
            System.out.println("Invalid movie number.");
        }
    }

    public static void updateMovie() {
        System.out.print("Enter movie number to update:");
        int index = sc.nextInt() - 1;
        sc.nextLine(); // Consume newline
        if (index >= 0 && index < movies.size()) {
            Movie movie = movies.get(index);
            System.out.print("Enter new name: ");
            String name = sc.nextLine();
            System.out.print("Enter new available seats: ");
            int seats = sc.nextInt();
            System.out.print("Enter new price: ");
            double price = sc.nextDouble();
            sc.nextLine(); // Consume newline
            System.out.print("Enter new show date and time (yyyy-MM-dd HH:mm): ");
            String dateTime = sc.nextLine();
            LocalDateTime showTime = LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));

            movie.name = name;
            movie.availableSeats = seats;
            movie.price = price;
            movie.showTime = showTime;

            System.out.println("Movie updated successfully!");
        } else {
            System.out.println("Invalid movie number.");
        }
    }

    public static void viewMovies() {
        System.out.println("\nAvailable Movies:");
        for (int i = 0; i < movies.size(); i++) {
            Movie m = movies.get(i);
            System.out.println((i + 1) + ". " + m.name + " - Seats: " + m.availableSeats + " - Price: $" + m.price +
                    " - Theater: " + m.theater + " - Show Time: " + m.showTime);
        }
    }

    public static void customerMenu() {
        viewMovies();
        System.out.println("Enter the number of the movie you want to book:");
        int movieIndex = sc.nextInt() - 1;

        if (movieIndex >= 0 && movieIndex < movies.size()) {
            Movie movie = movies.get(movieIndex);
            System.out.println("Enter the number of tickets to book:");
            int tickets = sc.nextInt();

            if (movie.bookTicket(tickets)) {
                System.out.println("Booking Successful! Total price: $" + (tickets * movie.price));
                System.out.println("Remaining seats: " + movie.availableSeats);
            } else {
                System.out.println("Sorry, not enough seats available.");
            }
        } else {
            System.out.println("Invalid movie selection.");
        }
    }
}
